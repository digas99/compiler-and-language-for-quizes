module(name, stat, hasVars, hasScanner, hasPrintWriter, hasList) ::= <<
<if(hasScanner)>
import java.util.Scanner;
<endif>
<if(hasVars)>
import java.util.HashMap;
<endif>
<if(hasPrintWriter)>
import java.io.PrintWriter;
import java.io.FileNotFoundException;
<endif>
<if(hasList)>
import java.util.ArrayList;
import java.util.List;
<endif>

public class <name> {
    <if(hasVars)>
    static HashMap\<String, String> vars = new HashMap\<>();
    <endif>
    <stats(stat)>
}
>>

main(stat) ::= <<
public static void main(String[] args) {
    <stats(stat)>
}
>>

handle_var_number(stat, type, var, value) ::= <<
<stats(stat)>
<atrib_double(type, var, value)>
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

get_from_map(string, double, boolean, id, var) ::= <<
<if(double)>
double <var> = vars.containsKey("<id>") ? Double.parseDouble(vars.get("<id>")) : Double.NaN;
<endif>
<if(string)>
String <var> = vars.containsKey("<id>") ? vars.get("<id>") : null;
<endif>
<if(boolean)>
boolean <var> = vars.containsKey("<id>") ? Boolean.parseBoolean(vars.get("<id>")) : null;
<endif>
>>

get_from_map_double(id, var) ::= <<
double <var> = vars.containsKey("<id>") ? Double.parseDouble(vars.get("<id>")) : Double.NaN;
>>

get_from_map_string(id, var) ::= <<
String <var> = vars.containsKey("<id>") ? vars.get("<id>") : null;
>>

get_from_map_boolean(id, var) ::= <<
boolean <var> = vars.containsKey("<id>") ? Boolean.parseBoolean(vars.get("<id>")) : null;
>>

tmp_atrib(type, var, value) ::= <<
<type> <var> = <value>;
>>

atrib(type, var, value, id) ::= <<
<type> <var> = <value>;
<if(id)>vars.put("<id>", <var>);<endif>
>>

atrib_double(type, var, value, id) ::= <<
<type> <var> = <value>;
<if(id)>vars.put("<id>", Double.toString(<var>));<endif>
>>

atrib_boolean(type, var, value, id) ::= <<
<type> <var> = <value>;
<if(id)>vars.put("<id>", Boolean.toString(<var>));<endif>
>>

atrib_unary(stat,id,type,var,op,e1) ::= <<
<stats(stat)>
<atrib_double(type, var, [op, e1], id)>
>>

binary_operation(stat, id, type, var, e1, op, e2) ::= <<
<stats(stat)>
<atrib_double(type, var, [e1, op, e2], id)>
>>

print(stat, text) ::= <<
<stats(stat)>
System.out.println(<text>);
>>

function(name, return_type, building_return, param, stat, ret) ::= <<
public static <return_type> <name>(<param>) {
    <stats(stat)>
    <if(ret)>

    // building the return statement
    <building_return>
    return <ret>;
    <endif>
}
>>

types_formater(type, id) ::= <<
<type> <id>
>>

callfunc(name, param) ::= <<
<name>(<param>);
>>

varmanip_front(var, action, id) ::= <<
<var><action>;
<if(id)>vars.put("<id>", Double.toString(<var>));<endif>
>>

varmanip_back(var, action, id) ::= <<
<action><var>;
<if(id)>vars.put("<id>", Double.toString(<var>));<endif>
>>

varmanip_number(newvar, var, action, number, mod_var, id) ::= <<
<if(mod_var)>
<get_from_map_double(mod_var, newvar)>
<var><action><mod_var>;
<endif>
<if(number)>
<var><action><number>;
<endif>
<if(id)>vars.put("<id>", Double.toString(<var>));<endif>
>>

handle_func_param(type, var, value, double, boolean) ::= <<
<tmp_atrib(type, var, value)>
vars.put("<value>", <if(double)>Double.toString<endif><if(boolean)>Boolean.toString<endif>(<var>));
>>

read(file, type, var, id) ::= <<
Scanner rd = new Scanner(<file>);
<atrib(type, var, "rd.nextLine()", id)>
>>

write(file, var, stat, string, double) ::= <<
<if(stat)><stats(stat)><endif>
try {
    PrintWriter <var> = new PrintWriter(<file>);
    <if(string)><var>.write(<string>);<endif>
    <if(double)><var>.write(Double.toString(<double>));<endif>
    <var>.close();
} catch(FileNotFoundException e) {
    System.out.println(e);
}
>>

for_loop(stat, id, var, start, end, comp, increment, op) ::= <<
for (double <var> = <start>; <var> <comp> <end>; <var><op>=<increment>) {
    vars.put("<id>", Double.toString(<var>));
    <stats(stat)>
}
>>

for_in(stat, type, var, var1, var2) ::= <<
for (<type> <var> : <var2>) {
    vars.put("<var1>", Double.toString(<var>));
    <stats(stat)>
}
>>

return_plain_val(val) ::= <<
<if(val)><val><endif>
>>

list_double(init, var, tmpvar, tmpvar2, val) ::= <<
<if(init)>List\<Double> <var> = new ArrayList\<>();<endif>
<if(val)>
int[] <tmpvar> = {<val>};
for (int <tmpvar2> : <tmpvar>) {
    <var>.add(Double.valueOf(<tmpvar2>));
}
<endif>
>>

list_string(init, var, tmpvar, tmpvar2, val) ::= <<
<if(init)>List\<String> <var> = new ArrayList\<>();<endif>
<if(val)>
String[] <tmpvar> = {<val>};
for (String <tmpvar2> : <tmpvar>) {
    <var>.add(<tmpvar2>);
}
<endif>
>>

list_boolean(init, var, tmpvar, tmpvar2, val) ::= <<
<if(init)>List\<Boolean> <var> = new ArrayList\<>();<endif>
<if(val)>
boolean[] <tmpvar> = {<val>};
for (boolean <tmpvar2> : <tmpvar>) {
    <var>.add(<tmpvar2>);
}
<endif>
>>

conditional(s1, s2, not, id, op, equals) ::= <%
<if(s1)>
<if(not)><not>(<endif>
<s1>
<if(equals)><equals>(<endif>
<if(op)> <op> <endif>
<s2>
<if(equals)>)<endif>
<if(not)>)<endif>
<endif>
<if(id)><not><id><endif>
%>

do_while(stat, condition) ::= <<
do {
    <stats(stat)>
} while (<condition>);
>>

while(stat, condition) ::= <<
while (<condition>) {
    <stats(stat)>
}
>>

ifstat(condition, stat, elseifstat, final) ::= <<
if (<condition>) {
    <stats(stat)>
}
<if(elseifstat)>
<elseifstat>
<endif>
<if(final)>
else {
    <final>
}
<endif>
>>

elsifstat(condition, stat)::= <<
else if (<condition>) {
    <stats(stat)>
}
>>