module(name, stat, hasVars, hasScanner) ::= <<
<if(hasScanner)>
import java.util.Scanner;
<endif>
<if(hasVars)>
import java.util.HashMap;
<endif>

public class <name> {
    <if(hasVars)>
    static HashMap\<String, String> vars = new HashMap\<>();
    <endif>
    <stats(stat)>
}
>>

main(stat) ::= <<
public static void main(String[] args) {
    <stats(stat)>
}
>>

handle_var_number(stat, type, var, value) ::= <<
<stats(stat)>
<atrib_double(type, var, value)>
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

get_from_map(string, double, id, var) ::= <<
<if(double)>
double <var> = vars.containsKey("<id>") ? Double.parseDouble(vars.get("<id>")) : Double.NaN;
<endif>
<if(string)>
String <var> = vars.containsKey("<id>") ? vars.get("<id>") : null;
<endif>
>>

get_from_map_double(id, var) ::= <<
double <var> = vars.containsKey("<id>") ? Double.parseDouble(vars.get("<id>")) : Double.NaN;
>>

get_from_map_string(id, var) ::= <<
String <var> = vars.containsKey("<id>") ? vars.get("<id>") : null;
>>

tmp_atrib(type, var, value) ::= <<
<type> <var> = <value>;
>>

atrib(type, var, value, id) ::= <<
<type> <var> = <value>;
vars.put("<id>", <var>);
>>

atrib_double(type, var, value, id) ::= <<
<type> <var> = <value>;
vars.put("<id>", Double.toString(<var>));
>>

atrib_parens(stat,id,type,var,e1,par1,par2) ::= <<
<stats(stat)>
<type> <var> = <par1><e1><par2>;
>>


atrib_unary(stat,id,type,var,op,e1) ::= <<
<stats(stat)>
<type> <var> = <op><e1>;
>>

binary_operation(stat, id, type, var, e1, op, e2) ::= <<
<stats(stat)>
<atrib_double(type, var, [e1, op, e2], id)>
>>

print(stat, text) ::= <<
<stats(stat)>
System.out.println(<text>);
>>

function(name, return_type, building_return, param, stat, ret) ::= <<
public static <return_type> <name>(<param>) {
    <stats(stat)>
    <if(ret)>

    // building the return statement
    <building_return>
    return <ret>;
    <endif>
}
>>

callfunc(name, param) ::= <<
<name>(<param>);
>>

varmanip_front(var, action, id) ::= <<
<var><action>;
vars.put("<id>", Double.toString(<var>));
>>

varmanip_back(var, action, id) ::= <<
<action><var>;
vars.put("<id>", Double.toString(<var>));
>>

varmanip_number(newvar, var, action, number, mod_var, id) ::= <<
<if(mod_var)>
<get_from_map_double(mod_var, newvar)>
<var><action><mod_var>;
<endif>
<if(number)>
<var><action><number>;
<endif>
vars.put("<id>", Double.toString(<var>));
>>

handle_func_param(type, var, value) ::= <<
<tmp_atrib(type, var, value)>
vars.put("<value>", Double.toString(<var>));
>>

read(file, type, var, id) ::= <<
Scanner rd = new Scanner(<file>);
<atrib(type, var, "rd.nextLine()", id)>
>>